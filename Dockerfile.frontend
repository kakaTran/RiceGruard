FROM node:18-alpine AS deps

# Create the working directory
WORKDIR /app

# Copy only package files first to leverage Docker cache
COPY frontend/package*.json ./
COPY frontend/pnpm-lock.yaml* ./

# Install dependencies with specific flags to speed up installation
RUN npm ci --legacy-peer-deps --prefer-offline --no-audit

# Builder stage
FROM node:18-alpine AS builder
WORKDIR /app

# Copy dependencies and source
COPY --from=deps /app/node_modules ./node_modules
COPY ./frontend ./

# Disable telemetry
ENV NEXT_TELEMETRY_DISABLED 1

# Set API URL
ENV NEXT_PUBLIC_API_URL=https://riceguard.onrender.com

# Build with production optimization
ENV NODE_ENV=production
RUN npm run build

# Production stage
FROM node:18-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED 1
ENV PORT=3000
ENV NEXT_PUBLIC_API_URL=https://riceguard.onrender.com

# Create necessary directories
RUN mkdir -p /app/.next

# Copy necessary files
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/.next/standalone ./

# Set up non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs && \
    chown -R nextjs:nodejs /app

USER nextjs

EXPOSE 3000

CMD ["node", "server.js"] 